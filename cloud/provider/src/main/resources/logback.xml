<?xml version="1.0" encoding="UTF-8"?>

<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!--<springProperty name="APP_NAME" scope="context" source="spring.application.name" defaultValue="web"/>-->
	<springProperty name="ServerIP" scope="context" source="spring.cloud.client.ip-address" defaultValue="0.0.0.0"/>
	<springProperty name="ServerPort" scope="context" source="server.port" defaultValue="0000"/>
	<!--<springProperty name="LOG_MAX_FILESIZE" scope="context" source="logback.filesize" defaultValue="50MB"/>
	<springProperty name="LOG_FILE_MAX_DAY" scope="context" source="logback.filemaxday" defaultValue="7"/>-->
	<!--<springProperty name="LOG_FILE" scope="context" source="logging.file" defaultValue="../logs/application/${APP_NAME}"/>-->
	<!--<springProperty name="LOG_DIR" scope="context" source="logging.file" defaultValue="logs"/>-->

	<property name="APP_NAME" value="provider"/>
	<property name="LOG_DIR" value="logs"/>
	<!-- 彩色日志格式 -->
	<property name="MY_LOG_PATTERN" value="[${APP_NAME}:${ServerIP}:${ServerPort}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) ${PID} [%yellow(%X{X-B3-TraceId}),%green(%X{X-B3-SpanId}),%blue(%X{X-B3-ParentSpanId})] %cyan(%logger):%highlight(%-4L) - %m%n" />
	<property name="MY_LOG_PATTERN_NO_COLOR" value="[${APP_NAME}:${ServerIP}:${ServerPort}] %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %level ${PID} [%X{traceId}] %logger:%-4L - %m%n" />
	<property name="LOG_MAX_FILESIZE" value="50MB" />
	<property name="LOG_FILE_MAX_DAY" value="7" />

	<!-- 动态日志级别 -->
	<jmxConfigurator />

	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${MY_LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>-->
	</appender>

	<appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/${APP_NAME}-debug.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<fileNamePattern>${LOG_DIR}/${APP_NAME}-debug.%i.log</fileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>5</maxIndex>
		</rollingPolicy>
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>${LOG_MAX_FILESIZE}</maxFileSize>
		</triggeringPolicy>
		<encoder>
			<pattern>${MY_LOG_PATTERN_NO_COLOR}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>DEBUG</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/${APP_NAME}-warn.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<fileNamePattern>${LOG_DIR}/${APP_NAME}-warn.%i.log</fileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>5</maxIndex>
		</rollingPolicy>
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>${LOG_MAX_FILESIZE}</maxFileSize>
		</triggeringPolicy>

		<encoder>
			<pattern>${MY_LOG_PATTERN_NO_COLOR}</pattern>
			<charset>UTF-8</charset>
		</encoder>

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>WARN</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--<file>${LOG_DIR}/${APP_NAME}-error.log</file>-->
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<!--<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			&lt;!&ndash;日志输出位置 可相对、和绝对路径 &ndash;&gt;
			<fileNamePattern>${LOG_DIR}/${APP_NAME}-error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			&lt;!&ndash; 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 &ndash;&gt;
			<maxHistory>${maxHistory}</maxHistory>
			<maxFileSize>20MB</maxFileSize>
			&lt;!&ndash;用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志&ndash;&gt;
			<totalSizeCap>500MB</totalSizeCap>
		</rollingPolicy>-->
		<file>${LOG_DIR}/${APP_NAME}-error.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<fileNamePattern>${LOG_DIR}/${APP_NAME}-error.%i.log</fileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>5</maxIndex>
		</rollingPolicy>
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>${LOG_MAX_FILESIZE}</maxFileSize>
		</triggeringPolicy>

		<encoder>
			<pattern>${MY_LOG_PATTERN_NO_COLOR}</pattern>
			<charset>UTF-8</charset>
		</encoder>

		<!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>ERROR</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>


	<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_DIR}/${APP_NAME}-info.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_DIR}/${APP_NAME}-info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<!--保留时间,单位:天-->
			<maxHistory>${LOG_FILE_MAX_DAY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>${LOG_MAX_FILESIZE}</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>

		<encoder>
			<!-- 设置日志输出格式 -->
			<pattern>${MY_LOG_PATTERN_NO_COLOR}</pattern>
			<charset>UTF-8</charset>
		</encoder>

		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 设置过滤级别 -->
			<level>INFO</level>
			<!-- 用于配置符合过滤条件的操作 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 用于配置不符合过滤条件的操作 -->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<logger name="SQL" level="INFO" additivity="false">
		<appender-ref ref="CONSOLE"/>
		<appender-ref ref="DEBUG"/>
	</logger>

	<!-- root级别 DEBUG -->
	<root level="INFO">
		<!-- 打印debug级别日志及以上级别日志 -->
		<!--<level value="INFO" />-->
		<!-- 控制台输出 -->
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="DEBUG" />
		<appender-ref ref="WARN" />
		<appender-ref ref="INFO" />
		<appender-ref ref="ERROR" />
	</root>
</configuration>